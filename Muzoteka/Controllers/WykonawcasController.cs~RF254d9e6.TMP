using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Muzoteka.Models;
using Muzoteka.ViewModel;
using Muzoteka.App_Start;

namespace Muzoteka.Controllers
{
    public class WykonawcasController : Controller
    {
        private muzotekaEntities db = new muzotekaEntities();

        // GET: Wykonawcas
        [Authorize]
        public ActionResult Index()
        {
            return View(db.wykonawca.ToList());
        }

        // GET: Wykonawcas/Details/5
        [Authorize]
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            var wykonawcaViewModel = new WykonawcaViewModel()
            {
                wykonawca = db.wykonawca.Include(i => i.album).Include(i => i.utwor).First(i => i.id == id),
            };

            if (wykonawcaViewModel.wykonawca == null)
                return HttpNotFound();

            //var allAlbumsList = db.album.ToList();
            //wykonawcaViewModel.AllAlbums = allAlbumsList.Select(o => new SelectListItem
            //{
            //    Text = o.nazwa,
            //    Value = o.id.ToString()
            //});

            return View(wykonawcaViewModel);
        }

        // GET: Wykonawcas/Create
        [AuthorizeRoles("ADMIN")]
        public ActionResult Create()
        {
            return View();
        }

        // POST: Wykonawcas/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AuthorizeRoles("ADMIN")]
        public ActionResult Create([Bind(Include = "id,imie,nazwisko,pseudonim,data_ur,dddb,opis")] wykonawca wykonawca)
        {
            if (ModelState.IsValid)
            {
                db.wykonawca.Add(wykonawca);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(wykonawca);
        }

        // GET: Wykonawcas/Edit/5
        [AuthorizeRoles("ADMIN")]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            var wykonawcaViewModel = new WykonawcaViewModel()
            {
                wykonawca = db.wykonawca.Include(i => i.album).Include(i => i.utwor).First(i => i.id == id)
            };

            if(wykonawcaViewModel == null)
            {
                return HttpNotFound();
            }

            var allAlbumsList = db.album.ToList();
            wykonawcaViewModel.AllAlbums = allAlbumsList.Select(o => new SelectListItem
            {
                Text = o.nazwa,
                Value = o.id.ToString()
            });

            var allUtworsList = db.utwor.ToList();
            wykonawcaViewModel.AllUtwors = allUtworsList.Select(u => new SelectListItem
            {
                Text = u.nazwa,
                Value = u.id.ToString()
            });

            return View(wykonawcaViewModel);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(WykonawcaViewModel wykonawcaView)
        {

            if (wykonawcaView == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }



            if (ModelState.IsValid)
            {
                var wykonawcaToUpdate = db.wykonawca.Include(i => i.album).First(i => i.id == wykonawcaView.wykonawca.id);

                if (TryUpdateModel(wykonawcaToUpdate, "wykonawca", new string[] { "pseudonim" }))
                {
                    var newAlbums = db.album.Where(m => wykonawcaView.SelectedAlbums.Contains(m.id)).ToList();
                    var updatedAlbums = new HashSet<int>(wykonawcaView.SelectedAlbums);
                    foreach (album a in db.album)
                    {
                        if (!updatedAlbums.Contains(a.id))
                        {
                            wykonawcaToUpdate.album.Remove(a);
                        }
                        else
                        {
                            wykonawcaToUpdate.album.Add((a));
                        }
                    }

                    db.Entry(wykonawcaToUpdate).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                }

                return RedirectToAction("Index");
            }

            return View(wykonawcaView);
        }

        // GET: Wykonawcas/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            wykonawca wykonawca = db.wykonawca.Find(id);
            if (wykonawca == null)
            {
                return HttpNotFound();
            }
            return View(wykonawca);
        }

        // POST: Wykonawcas/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            wykonawca wykonawca = db.wykonawca.Find(id);
            db.wykonawca.Remove(wykonawca);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
